protocol schematics version 0.1

---

The RTS/CTS messages are inspired from the WiFi standards. The used connection between client and server are a shared channel. Every side can start the communication any time. This means server and client can collide when they start to communicate with each other. In order to prevent this, the communication initiator has to request the channel (RTS - request-to-send) and the other side has to grant the channel (CTS - clear-to-send). When both parties collide during the RTS/CTS messages, each one backoffs a random time between 0 and 1 second. This assures that only one party will get the channel at a given time.


============= all clients =============

initialize communication (all clients):

# first version verification
s->c:	VERSION x.y
c->s:	OK
c->s:	VERSION x.y
s->c:	OK

# second authentication
c->s:	USER username
s->c:	OK
c->s:	PASS password
s->c:	AUTHENTICATED

# third registration
SEE IN EACH CLIENT SECTION FOR DETAILS

---

client PING request:

c->s:	RTS <uniqueId>
s->c:	CTS <uniqueId>
c->s:	PING
s->c:	PONG


============= client "sensor" =============

initialize communication (sensor client):

# first version verification
SEE GENERAL FOR DETAILS

# second authentication
SEE GENERAL FOR DETAILS

# third registration
c->s:	REGISTER START
c->s:	CONFIGURATION new/CONFIGURATION old
c->s:	NODE base64(hostname) nodeType
c->s:	SENSORCOUNT sensorCount
c->s:	SENSOR clientSensorId alertDelay alertLevel base64(description) triggerAlways
c->s:	SENSOR clientSensorId alertDelay alertLevel base64(description) triggerAlways
[...]
c->s:	REGISTER END
s->c:	REGISTERED

---

complete sensor status update:

c->s:	RTS <uniqueId>
s->c:	CTS <uniqueId>
c->s:	STATUS START
c->s:	SENSOR clientSensorId state
c->s:	SENSOR clientSensorId state
[...]
c->s:	STATUS END
s->c:	OK

---

triggered sensor alert message:

c->s:	RTS <uniqueId>
s->c:	CTS <uniqueId>
c->s:	SENSORALERT clientSensorId state
s->c:	OK

---

state change of a sensor message (only send if no sensor alert triggered):

c->s:	RTS <uniqueId>
s->c:	CTS <uniqueId>
c->s:	STATECHANGE clientSensorId state
s->c:	OK


============= client "manager" =============

initialize communication (manager client):

# first version verification
SEE GENERAL FOR DETAILS

# second authentication
SEE GENERAL FOR DETAILS

# third registration
c->s:	REGISTER START
c->s:	CONFIGURATION new/CONFIGURATION old
c->s:	NODE base64(hostname) nodeType
c->s:	MANAGER base64(description)
c->s:	REGISTER END
s->c:	REGISTERED

---

complete alert system state update:

s->c:	RTS <uniqueId>
c->s:	CTS <uniqueId>
s->c:	STATUS START
s->c:	OPTION START
s->c:	OPTIONCOUNT optionCount
s->c:	OPTION base64(type) value
s->c:	OPTION base64(type) value
[...]
s->c:	OPTION END
s->c:	NODE START
s->c:	NODECOUNT nodeCount
c->s:	NODE nodeId base64(hostname) nodeType connected
c->s:	NODE nodeId base64(hostname) nodeType connected
[...]
s->c:	NODE END
s->c:	SENSOR START
c->s:	SENSORCOUNT sensorCount
c->s:	SENSOR nodeId sensorId alertDelay alertLevel base64(description) lastStateUpdated state
c->s:	SENSOR nodeId sensorId alertDelay alertLevel base64(description) lastStateUpdated state
[...]
s->c:	SENSOR END
s->c:	MANAGER START
c->s:	MANAGERCOUNT managerCount
s->c:	MANAGER nodeId managerId base64(description)
s->c:	MANAGER nodeId managerId base64(description)
[...]
s->c:	MANAGER END
s->c:	ALERT START
c->s:	ALERTCOUNT alertCount
c->s:	ALERT nodeId alertId base64(description)
c->s:	ALERT nodeId alertId base64(description)
[...]
s->c:	ALERT END
s->c:	STATUS END
c->s:	STATUS OK

---

option change:

c->s:	RTS <uniqueId>
s->c:	CTS <uniqueId>
c->s:	OPTION base64(type) value timeDelay
s->c:	OPTION OK

---

sensor alert was triggered message:

s->c:	RTS <uniqueId>
c->s:	CTS <uniqueId>
s->c:	SENSORALERT sensorId state alertLevel
c->s:	SENSORALERT OK

---

sensor state has changed message:

s->c:	RTS <uniqueId>
c->s:	CTS <uniqueId>
s->c:	STATECHANGE sensorId state
c->s:	STATECHANGE OK


============= client "alert" =============

initialize communication (manager alert):

# first version verification
SEE GENERAL FOR DETAILS

# second authentication
SEE GENERAL FOR DETAILS

# third registration
c->s:	REGISTER START
c->s:	CONFIGURATION new/old
c->s:	NODE base64(hostname) nodeType
c->s:	ALERTCOUNT alertCount
c->s:	ALERT clientAlertId base64(description)
c->s:	ALERT clientAlertId base64(description)
[...]
c->s:	ALERTLEVELCOUNT alertLevelCount
c->s:	ALERTLEVEL alertLevel
c->s:	ALERTLEVEL alertLevel
[...]
c->s:	REGISTER END
s->c:	REGISTERED

---

sensor alert was triggered message:

s->c:	RTS <uniqueId>
c->s:	CTS <uniqueId>
s->c:	SENSORALERT sensorId state alertLevel
c->s:	SENSORALERT OK

---

all sensor alerts were deactivated message:

s->c:	RTS <uniqueId>
c->s:	CTS <uniqueId>
s->c:	SENSORALERTSOFF
c->s:	SENSORALERTSOFF OK